(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{151:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(1),o=n(9),a=(n(0),n(167)),i={id:"docker",title:"Docker",sidebar_label:"Docker"},c={id:"docker",title:"Docker",description:"## Basics",source:"@site/docs/docker.md",permalink:"/docs/docker",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/docker.md",sidebar_label:"Docker",sidebar:"someSidebar",previous:{title:"Cloud Server Setup",permalink:"/docs/cloud-server"},next:{title:"Shell",permalink:"/docs/shell"}},s=[{value:"Basics",id:"basics",children:[]},{value:"Video conversion",id:"video-conversion",children:[{value:"Links",id:"links",children:[]}]},{value:"Dockerfile",id:"dockerfile",children:[]},{value:"docker-compose commands",id:"docker-compose-commands",children:[]},{value:"Copy files from host to running container",id:"copy-files-from-host-to-running-container",children:[]}],d={rightToc:s};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"basics"},"Basics"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),'# Run a container\ndocker run -p 80:80 nginx\n\n# Run a container in detached mode with restart policy,\n# volume, network, port, environment variable & a name\ndocker run --name postgres-db --restart always \\\n    -v $PWD/data:/usr/data --net reverse-proxy \\\n    -p 5433:5432 \\\n    -e POSTGRES_PASSWORD=mysecretpassword -d postgres\n\n# List running containers\ndocker ps\n\n# List all containers (Running or Stopped)\ndocker ps -a\n\n# Remove untagged images\ndocker rmi -f $(docker images | grep "<none>" | awk "{print \\$3}")\n\n# Build Image\ndocker build -t mysticalaj/node-web-app -f prod/Dockerfile . # -t for tagname\n\n# List images\ndocker images\n\n# Check logs\ndocker logs <container id>\n\n# Run command inside running container\ndocker exec -it <container id> /bin/bash\n\n# Stop container\ndocker stop container_id\n\n# Remove stopped container\ndocker rm container_id\n\n# Remove image\ndocker image rm image_name\n\n# remove all stopped containers\ndocker rm $(docker ps --filter status=exited -q)\n\n# remove all containers\ndocker kill $(docker ps -aq)\ndocker rm $(docker ps -aq)\n\n# complete cleanup of unused docker resources\ndocker prune\n')),Object(a.b)("h2",{id:"video-conversion"},"Video conversion"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"# Convert high quality video to various formats\n<720>\ndocker run -v $PWD:/tmp jrottenberg/ffmpeg \\\n        -stats \\\n        -i /tmp/test.mp4 \\\n        -s hd720 -c:v libx264 -crf 23 -c:a aac -strict -2 /tmp/test_720.mp4\n<480>\ndocker run -v $PWD:/tmp jrottenberg/ffmpeg \\\n        -stats \\\n        -i /tmp/test.mp4 \\\n        -s hd480 -c:v libx264 -crf 23 -c:a aac -strict -2 /tmp/test_480.mp4\n\n# Convert Video to Audio\ndocker run -v $PWD:/tmp jrottenberg/ffmpeg \\\n        -stats \\\n        -i /tmp/test.mp4 \\\n        /tmp/test.mp3\n\n# Using Shaka Packager to create DASH content\ndocker run -v $PWD:/media -it --rm google/shaka-packager\n\npackager \\\n    'in=/media/test.mp4,stream=audio,init_segment=/media/output/audio/init.mp4,segment_template=/media/output/audio/$Number$.m4s' \\\n    'in=/media/test_720.mp4,stream=video,init_segment=/media/output/h264_720p/init.mp4,segment_template=/media/output/h264_720p/$Number$.m4s' \\\n    'in=/media/test_480.mp4,stream=video,init_segment=/media/output/h264_480p/init.mp4,segment_template=/media/output/h264_480p/$Number$.m4s' \\\n    --generate_static_live_mpd --mpd_output /media/output/test.mpd\npackager \\\n    in=/media/test.mp4,stream=audio,init_segment=/media/output/audio/init.mp4,segment_template=/media/output/audio/$Number$.m4s \\\n    --generate_static_live_mpd --mpd_output /media/output/test.mpd\n\n# Run python server\ncd output\npython -m http.server\n")),Object(a.b)("h3",{id:"links"},"Links"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Shaka Packager ",Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://google.github.io/shaka-packager/html/"}),"https://google.github.io/shaka-packager/html/")),Object(a.b)("li",{parentName:"ol"},"VideoJS Player ",Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"https://gist.github.com/ajaymore/093f9d415a80931636b4ca5dcced1478#file-index-html"}),"https://gist.github.com/ajaymore/093f9d415a80931636b4ca5dcced1478#file-index-html"))),Object(a.b)("h2",{id:"dockerfile"},"Dockerfile"),Object(a.b)("p",null,Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.docker.com/engine/reference/builder/"}),"Documentation")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"mkdir $(date +%Y-%m-%d_%H%M)")),Object(a.b)("h2",{id:"docker-compose-commands"},"docker-compose commands"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"sudo chown -R $USER:$USER . # Setting volume permissions\ndocker-compose build # also to rebuild\ndocker-compose up # Run all containers\ndocker-compose down\n")),Object(a.b)("h2",{id:"copy-files-from-host-to-running-container"},"Copy files from host to running container"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"docker cp foo.txt mycontainer:/foo.txt\ndocker cp mycontainer:/foo.txt foo.txt\n\n# Multiple files contained by the folder src can be copied into the target folder using:\n\ndocker cp src/. mycontainer:/target\ndocker cp mycontainer:/src/. target\n")))}p.isMDXComponent=!0},167:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=o.a.createContext({}),p=function(e){var t=o.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},m=function(e){var t=p(e.components);return o.a.createElement(d.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,b=m["".concat(i,".").concat(u)]||m[u]||l[u]||a;return n?o.a.createElement(b,c({ref:t},d,{components:n})):o.a.createElement(b,c({ref:t},d))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var d=2;d<a;d++)i[d]=n[d];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);