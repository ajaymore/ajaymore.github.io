"use strict";(self.webpackChunkajaymore=self.webpackChunkajaymore||[]).push([[5982],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},l=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),d=s(t),l=r,g=d["".concat(c,".").concat(l)]||d[l]||u[l]||a;return t?o.createElement(g,i(i({ref:n},p),{},{components:t})):o.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=l;var m={};for(var c in n)hasOwnProperty.call(n,c)&&(m[c]=n[c]);m.originalType=e,m[d]="string"==typeof e?e:r,i[1]=m;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}l.displayName="MDXCreateElement"},6345:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>m,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const a={sidebar_position:2},i="Docker",m={unversionedId:"programming/docker",id:"programming/docker",title:"Docker",description:"Basics",source:"@site/docs/programming/docker.md",sourceDirName:"programming",slug:"/programming/docker",permalink:"/docs/programming/docker",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Cloud Server",permalink:"/docs/programming/cloud-server"},next:{title:"Git",permalink:"/docs/programming/git"}},c={},s=[{value:"Basics",id:"basics",level:2},{value:"Video conversion",id:"video-conversion",level:2},{value:"Links",id:"links",level:3},{value:"Dockerfile",id:"dockerfile",level:2},{value:"docker-compose commands",id:"docker-compose-commands",level:2},{value:"Copy files from host to running container",id:"copy-files-from-host-to-running-container",level:2},{value:"MongoDB backup &amp; restore",id:"mongodb-backup--restore",level:2}],p={toc:s};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"docker"},"Docker"),(0,r.kt)("h2",{id:"basics"},"Basics"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Run a container\ndocker run -p 80:80 nginx\n\n# Run a container in detached mode with restart policy,\n# volume, network, port, environment variable & a name\ndocker run --name postgres-db --restart always \\\n    -v $PWD/data:/usr/data --net reverse-proxy \\\n    -p 5433:5432 \\\n    -e POSTGRES_PASSWORD=mysecretpassword -d postgres\n\n# List running containers\ndocker ps\n\n# List all containers (Running or Stopped)\ndocker ps -a\n\n# Remove untagged images\ndocker rmi -f $(docker images | grep "<none>" | awk "{print \\$3}")\n\n# Build Image\ndocker build -t mysticalaj/node-web-app -f prod/Dockerfile . # -t for tagname\n\n# List images\ndocker images\n\n# Check logs\ndocker logs <container id>\n\n# Run command inside running container\ndocker exec -it <container id> /bin/bash\n\n# Stop container\ndocker stop container_id\n\n# Remove stopped container\ndocker rm container_id\n\n# Remove image\ndocker image rm image_name\n\n# remove all stopped containers\ndocker rm $(docker ps --filter status=exited -q)\n\n# remove all containers\ndocker kill $(docker ps -aq)\ndocker rm $(docker ps -aq)\n\n# complete cleanup of unused docker resources\ndocker prune\n')),(0,r.kt)("h2",{id:"video-conversion"},"Video conversion"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Convert high quality video to various formats\n<720>\ndocker run -v $PWD:/tmp jrottenberg/ffmpeg \\\n        -stats \\\n        -i /tmp/test.mp4 \\\n        -s hd720 -c:v libx264 -crf 23 -c:a aac -strict -2 /tmp/test_720.mp4\n<480>\ndocker run -v $PWD:/tmp jrottenberg/ffmpeg \\\n        -stats \\\n        -i /tmp/test.mp4 \\\n        -s hd480 -c:v libx264 -crf 23 -c:a aac -strict -2 /tmp/test_480.mp4\n\n# Convert Video to Audio\ndocker run -v $PWD:/tmp jrottenberg/ffmpeg \\\n        -stats \\\n        -i /tmp/test.mp4 \\\n        /tmp/test.mp3\n\n# Using Shaka Packager to create DASH content\ndocker run -v $PWD:/media -it --rm google/shaka-packager\n\npackager \\\n    'in=/media/test.mp4,stream=audio,init_segment=/media/output/audio/init.mp4,segment_template=/media/output/audio/$Number$.m4s' \\\n    'in=/media/test_720.mp4,stream=video,init_segment=/media/output/h264_720p/init.mp4,segment_template=/media/output/h264_720p/$Number$.m4s' \\\n    'in=/media/test_480.mp4,stream=video,init_segment=/media/output/h264_480p/init.mp4,segment_template=/media/output/h264_480p/$Number$.m4s' \\\n    --generate_static_live_mpd --mpd_output /media/output/test.mpd\npackager \\\n    in=/media/test.mp4,stream=audio,init_segment=/media/output/audio/init.mp4,segment_template=/media/output/audio/$Number$.m4s \\\n    --generate_static_live_mpd --mpd_output /media/output/test.mpd\n\n# Run python server\ncd output\npython -m http.server\n")),(0,r.kt)("h3",{id:"links"},"Links"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Shaka Packager ",(0,r.kt)("a",{parentName:"li",href:"https://google.github.io/shaka-packager/html/"},"https://google.github.io/shaka-packager/html/")),(0,r.kt)("li",{parentName:"ol"},"VideoJS Player ",(0,r.kt)("a",{parentName:"li",href:"https://gist.github.com/ajaymore/093f9d415a80931636b4ca5dcced1478#file-index-html"},"https://gist.github.com/ajaymore/093f9d415a80931636b4ca5dcced1478#file-index-html"))),(0,r.kt)("h2",{id:"dockerfile"},"Dockerfile"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/"},"Documentation")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mkdir $(date +%Y-%m-%d_%H%M)")),(0,r.kt)("h2",{id:"docker-compose-commands"},"docker-compose commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown -R $USER:$USER . # Setting volume permissions\ndocker-compose build # also to rebuild\ndocker-compose up # Run all containers\ndocker-compose down\n")),(0,r.kt)("h2",{id:"copy-files-from-host-to-running-container"},"Copy files from host to running container"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker cp foo.txt mycontainer:/foo.txt\ndocker cp mycontainer:/foo.txt foo.txt\n\n# Multiple files contained by the folder src can be copied into the target folder using:\n\ndocker cp src/. mycontainer:/target\ndocker cp mycontainer:/src/. target\n")),(0,r.kt)("h2",{id:"mongodb-backup--restore"},"MongoDB backup & restore"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker run -d -p 27018:27017 --name some-mongo \\\n    -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \\\n    -e MONGO_INITDB_ROOT_PASSWORD=secret \\\n    mongo\n\n# Local docker instance mongodump\ndocker run --rm --link some-mongo -v $PWD/mongo-backup:/backup mongo \\\n bash -c 'mongodump --db programming -u mongoadmin -p secret --authenticationDatabase admin --out /backup --host some-mongo:27017'\n\n# Local docker instance mongorestore\ndocker run --rm --link some-mongo -v $PWD/mongo-backup:/backup mongo \\\n bash -c 'mongorestore --db programming_new -u mongoadmin -p secret --authenticationDatabase admin /backup/programming --host some-mongo:27017'\n\n# Remote instance mongodump\ndocker run --rm -v $PWD/mongo-backup:/backup mongo:4.2.5 \\\n bash -c 'mongodump --db programming_remote -u admin -p nREnSEovpWI7jvBZ --authenticationDatabase admin --out /backup --ssl --host inip-shard-00-00-ksqln.mongodb.net:27017,inip-shard-00-01-ksqln.mongodb.net:27017,inip-shard-00-02-ksqln.mongodb.net:27017'\n\n# Remote instance mongorestore\ndocker run --rm -v $PWD/mongo-backup:/backup mongo:4.2.5 \\\n    bash -c 'mongorestore --db programming_remote -u admin -p nREnSEovpWI7jvBZ --authenticationDatabase admin /backup/programming --ssl --host inip-shard-0/inip-shard-00-00-ksqln.mongodb.net:27017,inip-shard-00-01-ksqln.mongodb.net:27017,inip-shard-00-02-ksqln.mongodb.net:27017'\n")))}d.isMDXComponent=!0}}]);