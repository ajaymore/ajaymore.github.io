"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[5506],{3905:(e,r,n)=>{n.d(r,{Zo:()=>d,kt:()=>h});var t=n(7294);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,s=function(e,r){if(null==e)return{};var n,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=t.createContext({}),u=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},d=function(e){var r=u(e.components);return t.createElement(l.Provider,{value:r},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=s,h=c["".concat(l,".").concat(m)]||c[m]||p[m]||o;return n?t.createElement(h,a(a({ref:r},d),{},{components:n})):t.createElement(h,a({ref:r},d))}));function h(e,r){var n=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=m;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[c]="string"==typeof e?e:s,a[1]=i;for(var u=2;u<o;u++)a[u]=n[u];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1802:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var t=n(7462),s=(n(7294),n(3905));const o={sidebar_position:2},a="Cloud Server",i={unversionedId:"dev-guides/cloud-server",id:"dev-guides/cloud-server",title:"Cloud Server",description:"Get SSH public Key",source:"@site/docs/dev-guides/cloud-server.md",sourceDirName:"dev-guides",slug:"/dev-guides/cloud-server",permalink:"/docs/dev-guides/cloud-server",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Developer Guides",permalink:"/docs/category/developer-guides"},next:{title:"Docker",permalink:"/docs/dev-guides/docker"}},l={},u=[{value:"Get SSH public Key",id:"get-ssh-public-key",level:2},{value:"First time login after creating the server",id:"first-time-login-after-creating-the-server",level:2},{value:"Future logins",id:"future-logins",level:2},{value:"Firewall",id:"firewall",level:2},{value:"TimeZone",id:"timezone",level:2},{value:"Base packages",id:"base-packages",level:2},{value:"Docker Installation",id:"docker-installation",level:2},{value:"NGINX Proxy",id:"nginx-proxy",level:2},{value:"PostgreSQL",id:"postgresql",level:2},{value:"Run applications with docker",id:"run-applications-with-docker",level:2},{value:"File Copying TO &amp; FROM the server",id:"file-copying-to--from-the-server",level:2},{value:"Squid Proxy",id:"squid-proxy",level:3}],d={toc:u};function c(e){let{components:r,...n}=e;return(0,s.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"cloud-server"},"Cloud Server"),(0,s.kt)("h2",{id:"get-ssh-public-key"},"Get SSH public Key"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'ssh-keygen -t rsa -C "abc@xyz.com"\n')),(0,s.kt)("h2",{id:"first-time-login-after-creating-the-server"},"First time login after creating the server"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"ssh -i ~/.ssh/id_rsa root@ip_address\n\nadduser sammy\nusermod -aG sudo sammy\n\nsudo nano /etc/ssh/sshd_config\nPermitRootLogin no\nPasswordAuthentication no\n\nsu - sammy\nmkdir ~/.ssh\nchmod 700 ~/.ssh\nnano ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys # Copy public key into this file\nsudo systemctl status ssh.service\nsudo systemctl reload ssh.service # start if not started\n\n## Important check access before exiting from your local terminal\nssh -i ~/.ssh/id_rsa sammy@ip_address\n")),(0,s.kt)("h2",{id:"future-logins"},"Future logins"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"ssh -i ~/.ssh/id_rsa sammy@ip_address\n")),(0,s.kt)("h2",{id:"firewall"},"Firewall"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install ufw\nsudo ufw status\n\nsudo nano /etc/default/ufw\nset > IPV6=yes\n\nsudo ufw disable\nsudo ufw enable\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow 22/tcp\nsudo ufw allow www\n\n# Specific port\nsudo ufw allow 3306\n")),(0,s.kt)("h2",{id:"timezone"},"TimeZone"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"date\nsudo dpkg-reconfigure tzdata\n")),(0,s.kt)("h2",{id:"base-packages"},"Base packages"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"sudo apt update && sudo apt dist-upgrade && sudo apt autoremove\n")),(0,s.kt)("h2",{id:"docker-installation"},"Docker Installation"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.docker.com/install/linux/docker-ce/ubuntu/"},"https://docs.docker.com/install/linux/docker-ce/ubuntu/")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"sudo groupadd docker\nsudo usermod -aG docker $USER\nsu ${USER}\nid -nG\n")),(0,s.kt)("h2",{id:"nginx-proxy"},"NGINX Proxy"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'docker network create --driver bridge reverse-proxy\n\ndocker run --detach \\\n    --net reverse-proxy \\\n    --name nginx-proxy \\\n    --publish 80:80 \\\n    --publish 443:443 \\\n    --net reverse-proxy \\\n    --volume $HOME/certs:/etc/nginx/certs \\\n    --volume vhost:/etc/nginx/vhost.d \\\n    --volume html:/usr/share/nginx/html \\\n    --volume /var/run/docker.sock:/tmp/docker.sock:ro \\\n    nginxproxy/nginx-proxy\n    \ndocker run --detach \\\n    --name nginx-proxy-acme \\\n    --net reverse-proxy \\\n    --volumes-from nginx-proxy \\\n    --volume $HOME/certs:/etc/nginx/certs:rw \\\n    --volume /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --volume $HOME/acme:/etc/acme.sh \\\n    --env "DEFAULT_EMAIL=mail@yourdomain.tld" \\\n    nginxproxy/acme-companion\n')),(0,s.kt)("h2",{id:"postgresql"},"PostgreSQL"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'docker run -d --name postgres-server -p 5432:5432 \\\n    --net reverse-proxy \\\n    -v $PWD/postgres-data:/var/lib/postgresql/data \\\n    -e "TZ=Asia/Kolkata" \\\n    --restart always -e POSTGRES_PASSWORD=my-pswd postgres:15.1 -c superuser_reserved_connections=50\n')),(0,s.kt)("h2",{id:"run-applications-with-docker"},"Run applications with docker"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"# Simple HTTP Server\ndocker run --name http-server -p 80:80 -d nginx\n\n# MySQL Database\ndocker run --name mysql-db -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 3306:3306 --restart always -d mysql:5.7.29\ndocker run --name phpmyadmin -d --link mysql-db:db -p 4444:80 phpmyadmin/phpmyadmin\n\n# Install Wordpress\ndocker run --name wordpress-site \\\n --link mysql-db \\\n -p 80:80 \\\n -e WORDPRESS_DB_HOST=mysql-db \\\n -e WORDPRESS_DB_USER=root \\\n -e WORDPRESS_DB_PASSWORD=my-secret-pw \\\n -e WORDPRESS_DB_NAME=wordpress \\\n -e WORDPRESS_TABLE_PREFIX=wp_ \\\n -d wordpress\n")),(0,s.kt)("h2",{id:"file-copying-to--from-the-server"},"File Copying TO & FROM the server"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"# Local file TO the server\nscp -i ~/.ssh/test_cloud_rsa $PWD/christiann-koepke-EkL50nhEEoc-unsplash.jpg ubuntu@server-ip:/home/ubuntu/\n\n# Local file FROM the server\nscp -i ~/.ssh/test_cloud_rsa ubuntu@server-ip:/home/ubuntu/christiann-koepke-EkL50nhEEoc-unsplash.jpg $PWD/copy.jpg\n\n# Local folder TO the server\nscp -i ~/.ssh/test_cloud_rsa -r $PWD/image-folder ubuntu@server-ip:/home/ubuntu/image-folder\n\n# Local folder FROM the server\nscp -i ~/.ssh/test_cloud_rsa -r ubuntu@server-ip:/home/ubuntu/image-folder $PWD/image-folder-copy\n")),(0,s.kt)("h3",{id:"squid-proxy"},"Squid Proxy"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"sudo apt install squid apache2-utils\n\n# Edit /etc/squid/squid.conf http_access to allow all\n\n# Password\ntouch /etc/squid/passwd\nhtpasswd /etc/squid/passwd user1\n\n# Edit /etc/squid/squid.conf \nauth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/passwd\nauth_param basic realm proxy\nacl authenticated proxy_auth REQUIRED\nhttp_access allow authenticated\nhttp_port 3128\n\nservice squid restart\n")))}c.isMDXComponent=!0}}]);